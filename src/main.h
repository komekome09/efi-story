#pragma once

#include <efi.h>
#include <efibind.h>
#include <efilib.h>
#include <efiprot.h>
#include "stb_image.h"

#define SIZE_1MB 0x10000000
#define MAX_BUFFER_SIZE SIZE_1MB
#define MASK 0x00222222

typedef struct {
    EFI_GRAPHICS_OUTPUT_BLT_PIXEL* Buffer;
} BLT_PIXELS_BUFFER;

typedef struct {
    VOID* SceneBuffer;
    UINTN SceneBufferSize;
    VOID* ScenePixels;
    INT32 SceneWidth;
    INT32 SceneHeight;
    INT32 SceneBpp;
} BLT_PIXELS_SCENE;

typedef struct{
    UINT32 FpsMean[10];
    UINT32 TimeBefore;
    UINT32 TimeAfter;
    UINT32 TimeCount;
} FPS_COUNTER;

STATIC UINT32 GetFps(FPS_COUNTER *, EFI_TIME*);
STATIC EFI_STATUS WriteToBuffer(IN EFI_GRAPHICS_OUTPUT_PROTOCOL* , IN void*, IN EFI_GRAPHICS_OUTPUT_BLT_PIXEL*, IN INT32, IN INT32, IN INT32, IN INT32, IN INT32, IN INT32, IN INT32, IN INT32, IN INT32, IN INT32);
STATIC EFI_STATUS DrawImageFromBuffer(IN EFI_GRAPHICS_OUTPUT_PROTOCOL* , IN EFI_GRAPHICS_OUTPUT_BLT_PIXEL*);
STATIC EFI_FILE* OpenFileVolume();
STATIC EFI_STATUS LoadFile(IN EFI_HANDLE, IN CHAR16*, IN EFI_FILE*, OUT void**, OUT UINTN*);
STATIC EFI_STATUS ClearBuffer(IN EFI_GRAPHICS_OUTPUT_PROTOCOL*, IN EFI_GRAPHICS_OUTPUT_BLT_PIXEL*);
STATIC UINT32 XorShift();
STATIC EFI_STATUS PrintFont(IN EFI_GRAPHICS_OUTPUT_PROTOCOL*, IN void*, IN EFI_GRAPHICS_OUTPUT_BLT_PIXEL*, IN INT32, IN INT32, IN INT32, IN CHAR16*, IN UINTN, IN UINTN);
STATIC UINTN StrLength(IN CHAR16*);
STATIC EFI_INPUT_KEY ReadKey(EFI_SYSTEM_TABLE*);
